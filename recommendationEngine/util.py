
fingerprinting_metrics = [
"Average Throughput Rate ",
"Average Lead Time for User Story ",
"Average Cycle Time for User Story ",
"Average Wait Time for User Story ",
"Amount of WIP ",
"Average Repository Activity ",
"Average Pull Request Size ",
"Build Frequency ",
"Average Time to Fix Broken Build ",
"Average Build Execution Time ",
"Build Health Factors ",
"Unit Test Coverage ",
"Build Quality",
"Average Lead Time for Defects ",
"Average Cycle Time for Defects ",
"Average Wait Time for Defects ",
"Pull Request WIP ",
"Average Pull Request Lead Time ",
"Average Code Review Time ",
"Average Pull Request Time to First Review ",
"Average Pull Request Last Review to Merge Time ",
"Pull Request Flow Ratio",
"Pull Request Engagement",
"Deployment Volume",
"Average Deployment Duration",
"Deployment Failure Rate",
"Pull Request/Deployment Ratio",]

recommendations = [

"Finish old user stories first",
"Refine user stories before adding to backlog",
"Formulate and estimate user stories better",
"Check skills/capacity of developers",
"plan more developers for the user story",
"Refine user stories before adding to backlog",
"Review planning process",
"Take fewer requests in the Product Backlog",
"Check skills/capacity of developers",
"plan more developers for the user story",
"Prune and keep product backlog clean: review necessity of old requests",
"Decrease number of WIPs to under …",
"Formulate and estimate user stories better",
"Check skills/capacity of developers",
"Check foundational processes, platforms and automation",
"Use Git more actively",
"Plan smaller tasks (<1 day) and PRs",
"Prioritize fixing broken build",
"Optimize build / test time",
"Run static code analysis on daily basis",
"Integrate code more frequently",
"Write more unit tests",
"Act to prevent broken builds",
"Take care of reported defects quickly",
"Increase capacity of the team",
"Check the change integration process: automated testing/build, code review timeliness…",
"Prioritize code review",
"Plan more reviewers",
"Keep PR WIP stable to avoid PR saturation",
"Investigate impediments against deployment proceeding",
"Align team discussions, don’t waste too much time in PR",
"Foster the culture of code review",
"Try to optimize deployment time",
"Investigate deployment pipeline",
"Deploy PRs more often",
]